steps:
- task: MicroBuildCleanup@1
  condition: and(succeededOrFailed(), ne(variables['Hosted'], 'true'))
  displayName: MicroBuild Cleanup

- task: ms.vss-governance-buildtask.governance-build-task-component-detection.ComponentGovernanceComponentDetection@0
  displayName: Component Detection
  condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))

- task: NuGetCommand@2
  inputs:
    command: push
    searchPatternPush: '$(Build.SourcesDirectory)\bin\**\$(BuildConfiguration)\**\*.nupkg;!**\*.symbols.nupkg;!**/VS.*.nupkg'
    publishVstsFeed: $(feedGuid)
    allowPackageConflicts: true
  displayName: Push packages to VSTS feed
  condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))

- powershell: |
    $DllPaths = @(
        ,"bin\Microsoft.VisualStudio.Threading\$(BuildConfiguration)\Microsoft.VisualStudio.Threading.dll"
        ,"bin\Microsoft.VisualStudio.Threading.Analyzers\$(BuildConfiguration)\Microsoft.VisualStudio.Threading.Analyzers.dll"
    )
    Get-ChildItem $DllPaths -rec |% {
        $OutputDir = "$($_.Directory.FullName)\symstore"
        if (!(Test-Path $OutputDir)) { mkdir $OutputDir | Out-Null }
        Write-Host "Converting PDB for $_"
        azure-pipelines\Convert-PDB.ps1 -DllPath $_ -OutputPath "$OutputDir\$($_.BaseName).pdb"
    }
  displayName: Converting portable PDBs to Windows PDBs

- task: CopyFiles@1
  inputs:
    SourceFolder: bin
    Contents: |
      Microsoft.VisualStudio.Threading/$(BuildConfiguration)/**/Microsoft.VisualStudio.Threading.dll
      Microsoft.VisualStudio.Threading/$(BuildConfiguration)/**/symstore/Microsoft.VisualStudio.Threading.pdb
      Microsoft.VisualStudio.Threading.Analyzers/$(BuildConfiguration)/**/Microsoft.VisualStudio.Threading.Analyzers.dll
      Microsoft.VisualStudio.Threading.Analyzers/$(BuildConfiguration)/**/symstore/Microsoft.VisualStudio.Threading.Analyzers.pdb
      AsyncDebugTools/x86/$(BuildConfiguration)/AsyncDebugTools.dll
      AsyncDebugTools/x86/$(BuildConfiguration)/AsyncDebugTools.pdb
      AsyncDebugTools/x64/$(BuildConfiguration)/AsyncDebugTools.dll
      AsyncDebugTools/x64/$(BuildConfiguration)/AsyncDebugTools.pdb
    TargetFolder: $(Build.ArtifactStagingDirectory)/symbols
  displayName: Collecting symbols artifacts

- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: $(Build.ArtifactStagingDirectory)/symbols
    ArtifactName: symbols
    ArtifactType: Container
  displayName: Publish symbols as Azure DevOps artifacts

- task: PublishSymbols@2
  inputs:
    SymbolsFolder: $(Build.ArtifactStagingDirectory)/symbols
    SearchPattern: '**/*.pdb'
    IndexSources: false
    SymbolServerType: TeamServices
  displayName: Publish symbols to symbol server
  condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
