<?xml version="1.0" encoding="utf-8"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" source-language="en-US" target-language="ja" original="MICROSOFT.VISUALSTUDIO.THREADING.ANALYZERS/STRINGS.RESX" tool-id="MultilingualAppToolkit" product-name="n/a" product-version="n/a" build-num="n/a">
    <header>
      <tool tool-id="MultilingualAppToolkit" tool-name="Multilingual App Toolkit" tool-version="4.0.1795.0" tool-company="Microsoft" />
    </header>
    <body>
      <group id="MICROSOFT.VISUALSTUDIO.THREADING.ANALYZERS/STRINGS.RESX" datatype="resx">
        <trans-unit id="AwaitXInstead" translate="yes" xml:space="preserve">
          <source>Await {0} instead</source>
          <target state="needs-review-translation" state-qualifier="mt-suggestion">{0} を代わりにお待ちしております</target>
          <note from="MultilingualBuild" annotates="source" priority="2">"await" is a C# keyword and should not be translated.
{0} is a method name.</note>
        </trans-unit>
        <trans-unit id="UseAwaitInstead" translate="yes" xml:space="preserve">
          <source>Use await instead</source>
          <target state="needs-review-translation" state-qualifier="mt-suggestion">使用を代わりに待っています</target>
          <note from="MultilingualBuild" annotates="source" priority="2">"await" is a C# keyword and should not be translated.</note>
        </trans-unit>
        <trans-unit id="VSSDK001_MessageFormat" translate="yes" xml:space="preserve">
          <source>Synchronously waiting on tasks or awaiters is dangerous and may cause dead locks. Please consider the following options: 1) Switch to asynchronous wait if the caller is already a "async" method. 2) Change the chain of callers to be "async" methods, and then change this code to be asynchronous await. 3) Use JoinableTaskFactory.Run() to wait on the tasks or awaiters. Refer to http://blogs.msdn.com/b/andrewarnottms/archive/2014/05/07/asynchronous-and-multithreaded-programming-within-vs-using-the-joinabletaskfactory.aspx for more info.</source>
          <target state="needs-review-translation" state-qualifier="mt-suggestion">タスクや待機側での同期の待機は危険であり、デッドロックを引き起こす可能性があります。次のオプションを検討してください: 1) 呼び出し元が既に"async"メソッド場合、非同期待機に切り替えます。2) 変更を非同期にするこのコードを変更して"async"メソッドの呼び出し元のチェインを待っています。3) タスクまたは待機側で待機する JoinableTaskFactory.Run() を使用します。詳しくは http://blogs.msdn.com/b/andrewarnottms/archive/2014/05/07/asynchronous-and-multithreaded-programming-within-vs-using-the-joinabletaskfactory.aspx を参照してください。</target>
          <note from="MultilingualUpdate" annotates="source" priority="2">Please verify the translation’s accuracy as the source string was updated after it was translated.</note>
          <note from="MultilingualBuild" annotates="source" priority="2">"await" is a C# keyword and should not be translated.</note>
        </trans-unit>
        <trans-unit id="VSSDK001_Title" translate="yes" xml:space="preserve">
          <source>Avoid problematic synchronous waits</source>
          <target state="needs-review-translation" state-qualifier="mt-suggestion">タスクや待機側での同期の待機は危険であり、デッドロックを引き起こす可能性があります。</target>
          <note from="MultilingualUpdate" annotates="source" priority="2">Please verify the translation’s accuracy as the source string was updated after it was translated.</note>
        </trans-unit>
        <trans-unit id="VSSDK002_MessageFormat" translate="yes" xml:space="preserve">
          <source>Visual Studio service "{0}" should be used on main thread explicitly. 
Please either verify the current thread is main thread, or switch to main thread asynchronously. 
1) APIs to verify the current thread is main thread: ThreadHelper.ThrowIfNotOnUIThread(), or IThreadHandling.VerifyOnUIThread(). 
2) APIs to switch to main thread asynchronously: JoinableTaskFactory.SwitchToMainThreadAsync(), or IThreadHandling.SwitchToUIThread(). 
Refer to http://blogs.msdn.com/b/andrewarnottms/archive/2014/05/07/asynchronous-and-multithreaded-programming-within-vs-using-the-joinabletaskfactory.aspx for more info.</source>
          <target state="needs-review-translation" state-qualifier="mt-suggestion">Visual Studio のサービス「{0}」は、メイン スレッドに明示的に使用する必要があります。
現在のスレッドがメイン スレッド、またはメイン スレッドに切り替える非同期的にいずれかを確認してください。
1) 現在のスレッドを確認するための Api はメイン スレッド: ThreadHelper.ThrowIfNotOnUIThread()、または IThreadHandling.VerifyOnUIThread()。
2) にメインを切り替える Api スレッドを非同期的に: JoinableTaskFactory.SwitchToMainThreadAsync()、または IThreadHandling.SwitchToUIThread()。詳しくは http://blogs.msdn.com/b/andrewarnottms/archive/2014/05/07/asynchronous-and-multithreaded-programming-within-vs-using-the-joinabletaskfactory.aspx に
参照してください。</target>
        </trans-unit>
        <trans-unit id="VSSDK002_Title" translate="yes" xml:space="preserve">
          <source>Use VS services from UI thread</source>
          <target state="needs-review-translation" state-qualifier="mt-suggestion">Visual Studio のサービスは、メイン スレッドに明示的に使用する必要があります。</target>
          <note from="MultilingualUpdate" annotates="source" priority="2">Please verify the translation’s accuracy as the source string was updated after it was translated.</note>
        </trans-unit>
        <trans-unit id="VSSDK003_MessageFormat" translate="yes" xml:space="preserve">
          <source>Avoid Async Void method, because any exceptions thrown out of an async void method will be raised directly on the SynchronizationContext and will crash the process. 
Refer to https://msdn.microsoft.com/en-us/magazine/jj991977.aspx for more info.</source>
          <target state="needs-review-translation" state-qualifier="mt-suggestion">非同期の void メソッドからスローされる例外は、SynchronizationContext の直接が発生し、プロセスがクラッシュしますので非同期 Void メソッドは避けてください。詳しくは https://msdn.microsoft.com/en-us/magazine/jj991977.aspx に
参照してください。</target>
          <note from="MultilingualBuild" annotates="source" priority="2">"async void" is a pair of C# keywords. Do not translate them.</note>
        </trans-unit>
        <trans-unit id="VSSDK003_Title" translate="yes" xml:space="preserve">
          <source>Avoid async void methods</source>
          <target state="needs-review-translation" state-qualifier="mt-suggestion">Void で非同期メソッドは避けてください。</target>
          <note from="MultilingualUpdate" annotates="source" priority="2">Please verify the translation’s accuracy as the source string was updated after it was translated.</note>
          <note from="MultilingualBuild" annotates="source" priority="2">"async void" is a pair of C# keywords. Do not translate them.</note>
        </trans-unit>
        <trans-unit id="VSSDK004_MessageFormat" translate="yes" xml:space="preserve">
          <source>Avoid using async lambda as void returning delegate type, because any exceptions thrown out of an async lambda returning void will be raised directly on the SynchronizationContext and will crash the process. 
Refer to https://msdn.microsoft.com/en-us/magazine/jj991977.aspx for more info.</source>
          <target state="needs-review-translation" state-qualifier="mt-suggestion">Void を返す非同期のラムダからスローされるすべての例外は、SynchronizationContext の直接が発生し、プロセスがクラッシュしますので返すデリゲート型が void として非同期ラムダを使用をしないでください。詳しくは https://msdn.microsoft.com/en-us/magazine/jj991977.aspx に
参照してください。</target>
          <note from="MultilingualBuild" annotates="source" priority="2">"void" is a C# keyword and should not be translated.</note>
        </trans-unit>
        <trans-unit id="VSSDK004_Title" translate="yes" xml:space="preserve">
          <source>Avoid unsupported async delegates</source>
          <target state="needs-review-translation" state-qualifier="mt-suggestion">非同期のラムダは、返すデリゲート型が void として使用されています。</target>
          <note from="MultilingualUpdate" annotates="source" priority="2">Please verify the translation’s accuracy as the source string was updated after it was translated.</note>
        </trans-unit>
        <trans-unit id="VSSDK005_MessageFormat" translate="yes" xml:space="preserve">
          <source>AsyncEventHandler delegates should be invoked via the extension method "TplExtensions.InvokeAsync()" defined in Microsoft.VisualStudio.Threading assembly.</source>
          <target state="needs-review-translation" state-qualifier="mt-suggestion">"TplExtensions.InvokeAsync()"は、Microsoft.VisualStudio.Threading アセンブリで定義されている拡張メソッドでは、AsyncEventHandler デリゲートを呼び出す必要があります。</target>
        </trans-unit>
        <trans-unit id="VSSDK005_Title" translate="yes" xml:space="preserve">
          <source>Use InvokeAsync to raise async events</source>
          <target state="needs-review-translation" state-qualifier="mt-suggestion">"TplExtensions.InvokeAsync()"は、Microsoft.VisualStudio.Threading アセンブリで定義されている拡張メソッドでは、AsyncEventHandler デリゲートを呼び出す必要があります。</target>
          <note from="MultilingualUpdate" annotates="source" priority="2">Please verify the translation’s accuracy as the source string was updated after it was translated.</note>
        </trans-unit>
        <trans-unit id="VSSDK006_MessageFormat" translate="yes" xml:space="preserve">
          <source>Calling await on a Task inside a JoinableTaskFactory.Run, when the task is initialized outside the delegate can cause potential deadlocks.
You can avoid this problem by ensuring the task is initialized within the delegate or by using JoinableTask instead of Task.</source>
          <target state="needs-review-translation" state-qualifier="mt-suggestion">タスク内で、JoinableTaskFactory.Run に呼び出しを待っています潜在的なデッドロックが発生することができますデリゲートの外部タスクを初期化する時。タスクを確保することによってこの問題を回避することができます
は、デリゲートやタスクではなく JoinableTask を使用して初期化されます。</target>
        </trans-unit>
        <trans-unit id="VSSDK006_Title" translate="yes" xml:space="preserve">
          <source>Avoid awaiting non-joinable tasks in join contexts</source>
          <target state="needs-review-translation" state-qualifier="mt-suggestion">呼び出しを避けるため潜在的なデッドロックを避けるためにデリゲートの外部タスクを定義するときに"JoinableTaskFactory.Run"デリゲート内部タスクを待っています。</target>
          <note from="MultilingualUpdate" annotates="source" priority="2">Please verify the translation’s accuracy as the source string was updated after it was translated.</note>
        </trans-unit>
        <trans-unit id="VSSDK007_MessageFormat" translate="yes" xml:space="preserve">
          <source>Calling Lazy&lt;Task&lt;T&gt;&gt;.Value can deadlock when the value factory was previously started.
You should use AsyncLazy&lt;T&gt; instead.</source>
          <target state="needs-review-translation" state-qualifier="mt-suggestion">怠惰な&lt;Task&lt;T&gt;&gt;を呼び出します。値値ファクトリが開始されていたデッドロックが発生することができます。
AsyncLazy&lt;T&gt;を代わりに使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="VSSDK007_Title" translate="yes" xml:space="preserve">
          <source>Avoid using Lazy<it id="1" pos="open">&lt;T&gt;</it> where T is a Task<it id="2" pos="open">&lt;T2&gt;</it></source>
          <target state="needs-review-translation" state-qualifier="mt-suggestion">ここで T はタスク Lazy<it id="1" pos="open">&lt;T&gt;</it>を使用しないでください。</target>
          <note from="MultilingualUpdate" annotates="source" priority="2">Please verify the translation’s accuracy as the source string was updated after it was translated.</note>
        </trans-unit>
        <trans-unit id="VSSDK008_MessageFormat" translate="yes" xml:space="preserve">
          <source>The {0} member synchronously blocks. Call {1} instead and await its result.</source>
          <target state="needs-review-translation" state-qualifier="mt-suggestion">{0} メンバーは同期的にブロックします。代わりに {1} を呼び出すし、その結果を待っています。</target>
        </trans-unit>
        <trans-unit id="VSSDK008_MessageFormat_UseAwaitInstead" translate="yes" xml:space="preserve">
          <source>The {0} member synchronously blocks. Use await instead.</source>
          <target state="needs-review-translation" state-qualifier="mt-suggestion">{0} メンバーは同期的にブロックします。使用には、代わりにお待ちしております。</target>
        </trans-unit>
        <trans-unit id="VSSDK008_Title" translate="yes" xml:space="preserve">
          <source>Call async methods when in an async method</source>
          <target state="needs-review-translation" state-qualifier="mt-suggestion">非同期のメソッドの待機の選択肢を呼び出します。</target>
          <note from="MultilingualUpdate" annotates="source" priority="2">Please verify the translation’s accuracy as the source string was updated after it was translated.</note>
        </trans-unit>
        <trans-unit id="VSSDK009_MessageFormat" translate="yes" xml:space="preserve">
          <source>Limit use of synchronously blocking method calls such as JoinableTaskFactory.Run or Task.Result to public entrypoint members where you must be synchronous. Using it for internal members can needlessly add synchronous frames between asynchronous frames, leading to threadpool exhaustion.</source>
          <target state="needs-review-translation" state-qualifier="mt-suggestion">同期する必要があるパブリック エントリ ポイント メンバーに JoinableTaskFactory.Run や Task.Result などのメソッドの呼び出しを同期的にブロックの制限を使用します。内部のメンバーのためにそれを使用して不必要なスレッド プールの枯渇につながる、非同期なフレーム間の同期フレームを追加できます。</target>
        </trans-unit>
        <trans-unit id="VSSDK009_Title" translate="yes" xml:space="preserve">
          <source>Implement internal logic asynchronously</source>
          <target state="needs-review-translation" state-qualifier="mt-suggestion">非パブリック メソッドの同期ブロックを避けてください。</target>
          <note from="MultilingualUpdate" annotates="source" priority="2">Please verify the translation’s accuracy as the source string was updated after it was translated.</note>
        </trans-unit>
        <trans-unit id="VSSDK010_CodeFix_Title" translate="yes" xml:space="preserve">
          <source>Rename to {0}</source>
          <target state="needs-review-translation" state-qualifier="mt-suggestion">{0} の名前を変更します。</target>
          <note from="MultilingualUpdate" annotates="source" priority="2">Please verify the translation’s accuracy as the source string was updated after it was translated.</note>
          <note from="MultilingualBuild" annotates="source" priority="2">{0} is a method name.</note>
        </trans-unit>
        <trans-unit id="VSSDK010_MessageFormat" translate="yes" xml:space="preserve">
          <source>Use "Async" suffix in names of Task-returning methods.</source>
          <target state="needs-review-translation" state-qualifier="mt-suggestion">タスクを返すメソッド名のサフィックス"Async"を使用します。</target>
          <note from="MultilingualUpdate" annotates="source" priority="2">Please verify the translation’s accuracy as the source string was updated after it was translated.</note>
        </trans-unit>
        <trans-unit id="VSSDK010_Title" translate="yes" xml:space="preserve">
          <source>Use "Async" suffix for async methods</source>
          <target state="needs-review-translation" state-qualifier="mt-suggestion">タスクを返すメソッド名のサフィックス"Async"を使用します。</target>
          <note from="MultilingualUpdate" annotates="source" priority="2">Please verify the translation’s accuracy as the source string was updated after it was translated.</note>
        </trans-unit>
        <trans-unit id="VSSDK003_CodeFix_Title" translate="yes" xml:space="preserve">
          <source>Change return type to Task</source>
          <target state="new">Change return type to Task</target>
          <note from="MultilingualBuild" annotates="source" priority="2">Task is a type name and should not be translated.</note>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>