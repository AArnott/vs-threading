<?xml version="1.0" encoding="utf-8"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" source-language="en-US" target-language="de" original="MICROSOFT.VISUALSTUDIO.THREADING.ANALYZERS/STRINGS.RESX" tool-id="MultilingualAppToolkit" product-name="n/a" product-version="n/a" build-num="n/a">
    <header>
      <tool tool-id="MultilingualAppToolkit" tool-name="Multilingual App Toolkit" tool-version="4.0.1795.0" tool-company="Microsoft" />
    </header>
    <body>
      <group id="MICROSOFT.VISUALSTUDIO.THREADING.ANALYZERS/STRINGS.RESX" datatype="resx">
        <trans-unit id="AwaitXInstead" translate="yes" xml:space="preserve">
          <source>Await {0} instead</source>
          <target state="needs-review-translation" state-qualifier="mt-suggestion">Stattdessen erwarten Sie {0}</target>
          <note from="MultilingualBuild" annotates="source" priority="2">"await" is a C# keyword and should not be translated.
{0} is a method name.</note>
        </trans-unit>
        <trans-unit id="UseAwaitInstead" translate="yes" xml:space="preserve">
          <source>Use await instead</source>
          <target state="needs-review-translation" state-qualifier="mt-suggestion">Einsatz erwarten stattdessen</target>
          <note from="MultilingualBuild" annotates="source" priority="2">"await" is a C# keyword and should not be translated.</note>
        </trans-unit>
        <trans-unit id="VSSDK001_MessageFormat" translate="yes" xml:space="preserve">
          <source>Synchronous wait on tasks or awaiters is dangerous and may cause dead locks. Please consider the following options: 1) Switch to asynchronous wait if the caller is already a "async" method. 2) Change the chain of callers to be "async" methods, and then change this code to be asynchronous await. 3) Use JoinableTaskFactory.Run() to wait on the tasks or awaiters. Refer to http://blogs.msdn.com/b/andrewarnottms/archive/2014/05/07/asynchronous-and-multithreaded-programming-within-vs-using-the-joinabletaskfactory.aspx for more info.</source>
          <target state="needs-review-translation" state-qualifier="mt-suggestion">Synchrone warten auf Aufgaben oder Awaiters ist gefährlich und kann dazu führen, dass tote sperren. Bitte beachten Sie die folgenden Optionen: 1) wechseln Sie zur asynchronen warten, wenn der Anrufer bereits eine "Async"-Methode. (2) Änderung die Kette der Anrufer "Async" Methoden, und dann ändern Sie diesen Code asynchron zu erwarten. (3) verwenden Sie JoinableTaskFactory.Run() auf die Aufgaben oder Awaiters warten. Siehe http://blogs.msdn.com/b/andrewarnottms/archive/2014/05/07/asynchronous-and-multithreaded-programming-within-vs-using-the-joinabletaskfactory.aspx für mehr Info.</target>
          <note from="MultilingualBuild" annotates="source" priority="2">"await" is a C# keyword and should not be translated.</note>
        </trans-unit>
        <trans-unit id="VSSDK001_Title" translate="yes" xml:space="preserve">
          <source>Synchronous wait on tasks or awaiters is dangerous and may cause dead locks.</source>
          <target state="needs-review-translation" state-qualifier="mt-suggestion">Synchrone warten auf Aufgaben oder Awaiters ist gefährlich und kann dazu führen, dass tote sperren.</target>
        </trans-unit>
        <trans-unit id="VSSDK002_MessageFormat" translate="yes" xml:space="preserve">
          <source>Visual Studio service "{0}" should be used on main thread explicitly. 
Please either verify the current thread is main thread, or switch to main thread asynchronously. 
1) APIs to verify the current thread is main thread: ThreadHelper.ThrowIfNotOnUIThread(), or IThreadHandling.VerifyOnUIThread(). 
2) APIs to switch to main thread asynchronously: JoinableTaskFactory.SwitchToMainThreadAsync(), or IThreadHandling.SwitchToUIThread(). 
Refer to http://blogs.msdn.com/b/andrewarnottms/archive/2014/05/07/asynchronous-and-multithreaded-programming-within-vs-using-the-joinabletaskfactory.aspx for more info.</source>
          <target state="needs-review-translation" state-qualifier="mt-suggestion">Visual Studio Service "{0}" sollte ausdrücklich auf Haupt-Thread verwendet werden. 
Entweder überprüfen Sie bitte der aktuelle Thread ist Haupt-Thread oder Switch zu Haupt-Thread asynchron. 
1) APIs für den aktuellen Thread zu überprüfen ist Haupt-Thread: ThreadHelper.ThrowIfNotOnUIThread() oder IThreadHandling.VerifyOnUIThread(). 
2) APIs, wechseln Sie zu Haupt thread asynchron: JoinableTaskFactory.SwitchToMainThreadAsync() oder IThreadHandling.SwitchToUIThread(). Siehe 
, http://blogs.msdn.com/b/andrewarnottms/archive/2014/05/07/asynchronous-and-multithreaded-programming-within-vs-using-the-joinabletaskfactory.aspx für mehr Info.</target>
        </trans-unit>
        <trans-unit id="VSSDK002_Title" translate="yes" xml:space="preserve">
          <source>Visual Studio service should be used on main thread explicitly.</source>
          <target state="needs-review-translation" state-qualifier="mt-suggestion">Visual Studio-Dienst sollte explizit auf Haupt-Thread verwendet werden.</target>
        </trans-unit>
        <trans-unit id="VSSDK003_MessageFormat" translate="yes" xml:space="preserve">
          <source>Avoid Async Void method, because any exceptions thrown out of an async void method will be raised directly on the SynchronizationContext and will crash the process. 
Refer to https://msdn.microsoft.com/en-us/magazine/jj991977.aspx for more info.</source>
          <target state="needs-review-translation" state-qualifier="mt-suggestion">Vermeiden Sie Async Void-Methode, weil Ausnahmen geworfen aus einer Async-Void-Methode direkt auf den SynchronizationContext erhöht werden und den Prozess stürzt ab. Siehe 
, https://msdn.microsoft.com/en-us/magazine/jj991977.aspx für mehr Info.</target>
          <note from="MultilingualBuild" annotates="source" priority="2">"async void" is a pair of C# keywords. Do not translate them.</note>
        </trans-unit>
        <trans-unit id="VSSDK003_Title" translate="yes" xml:space="preserve">
          <source>Avoid Async Void method.</source>
          <target state="needs-review-translation" state-qualifier="mt-suggestion">Vermeiden Sie leere Async-Methode.</target>
          <note from="MultilingualBuild" annotates="source" priority="2">"async void" is a pair of C# keywords. Do not translate them.</note>
        </trans-unit>
        <trans-unit id="VSSDK004_MessageFormat" translate="yes" xml:space="preserve">
          <source>Avoid using async lambda as void returning delegate type, because any exceptions thrown out of an async lambda returning void will be raised directly on the SynchronizationContext and will crash the process. 
Refer to https://msdn.microsoft.com/en-us/magazine/jj991977.aspx for more info.</source>
          <target state="needs-review-translation" state-qualifier="mt-suggestion">Vermeiden Sie die Verwendung von Async Lambda als nichtig zurückkehrenden Delegattyp weil Ausnahmen aus einer asynchronen Lambda wieder nichtig geworfen direkt auf den SynchronizationContext angehoben werden werden und den Prozess stürzt. Siehe 
, https://msdn.microsoft.com/en-us/magazine/jj991977.aspx für mehr Info.</target>
          <note from="MultilingualBuild" annotates="source" priority="2">"void" is a C# keyword and should not be translated.</note>
        </trans-unit>
        <trans-unit id="VSSDK004_Title" translate="yes" xml:space="preserve">
          <source>Async lambda is being used as void returning delegate type.</source>
          <target state="needs-review-translation" state-qualifier="mt-suggestion">Async Lambda wird als nichtig zurückkehrenden Delegattyp verwendet.</target>
          <note from="MultilingualBuild" annotates="source" priority="2">"void" is a C# keyword and should not be translated.</note>
        </trans-unit>
        <trans-unit id="VSSDK005_MessageFormat" translate="yes" xml:space="preserve">
          <source>AsyncEventHandler delegates should be invoked via the extension method "TplExtensions.InvokeAsync()" defined in Microsoft.VisualStudio.Threading assembly.</source>
          <target state="needs-review-translation" state-qualifier="mt-suggestion">AsyncEventHandler-Delegaten sollte über die Erweiterungsmethode aufgerufen, die "TplExtensions.InvokeAsync()" in Microsoft.VisualStudio.Threading Assembly definiert.</target>
        </trans-unit>
        <trans-unit id="VSSDK005_Title" translate="yes" xml:space="preserve">
          <source>AsyncEventHandler delegates should be invoked via the extension method "TplExtensions.InvokeAsync()" defined in Microsoft.VisualStudio.Threading assembly.</source>
          <target state="needs-review-translation" state-qualifier="mt-suggestion">AsyncEventHandler-Delegaten sollte über die Erweiterungsmethode aufgerufen, die "TplExtensions.InvokeAsync()" in Microsoft.VisualStudio.Threading Assembly definiert.</target>
        </trans-unit>
        <trans-unit id="VSSDK006_MessageFormat" translate="yes" xml:space="preserve">
          <source>Calling await on a Task inside a JoinableTaskFactory.Run, when the task is initialized outside the delegate can cause potential deadlocks.
You can avoid this problem by ensuring the task is initialized within the delegate or by using JoinableTask instead of Task.</source>
          <target state="needs-review-translation" state-qualifier="mt-suggestion">Berufung auf eine Aufgabe innerhalb einer JoinableTaskFactory.Run erwarten wenn die Aufgabe außerhalb der Delegat initialisiert wird mögliche Deadlocks verursachen kann. 
Sie können dieses Problem vermeiden, indem sichergestellt wird, dass die Aufgabe innerhalb der Delegat initialisiert wird oder indem Sie JoinableTask anstelle von Aufgabe.</target>
        </trans-unit>
        <trans-unit id="VSSDK006_Title" translate="yes" xml:space="preserve">
          <source>Avoid calling await Task inside "JoinableTaskFactory.Run" delegate when Task is defined outside the delegate to avoid potential deadlocks.</source>
          <target state="needs-review-translation" state-qualifier="mt-suggestion">Vermeiden Sie Berufung Aufgabe innerhalb "JoinableTaskFactory.Run" Delegaten erwarten, wenn Aufgabe außerhalb der Delegat, der mögliche Deadlocks zu vermeiden definiert ist.</target>
        </trans-unit>
        <trans-unit id="VSSDK007_MessageFormat" translate="yes" xml:space="preserve">
          <source>Calling Lazy&lt;Task&lt;T&gt;&gt;.Value can deadlock when the value factory was previously started.
You should use AsyncLazy&lt;T&gt; instead.</source>
          <target state="needs-review-translation" state-qualifier="mt-suggestion">Rufen faul&lt;Task&lt;T&gt;&gt;. Wert kann einen deadlock, wenn die Wert-Fabrik bereits gestartet wurde. 
AsyncLazy&lt;T&gt; sollten Sie stattdessen verwenden.</target>
        </trans-unit>
        <trans-unit id="VSSDK007_Title" translate="yes" xml:space="preserve">
          <source>Avoid using Lazy<it id="1" pos="open">&lt;T&gt;</it> where T is a Task.</source>
          <target state="needs-review-translation" state-qualifier="mt-suggestion">Vermeiden Sie die Verwendung Lazy<it id="1" pos="open"> &lt;T&gt; </it> , wo T ist eine Aufgabe.</target>
        </trans-unit>
        <trans-unit id="VSSDK008_MessageFormat" translate="yes" xml:space="preserve">
          <source>The {0} member synchronously blocks. Call {1} instead and await its result.</source>
          <target state="needs-review-translation" state-qualifier="mt-suggestion">Das {0}-Mitglied blockiert synchron. Rufen Sie stattdessen {1} und warten auf das Ergebnis.</target>
        </trans-unit>
        <trans-unit id="VSSDK008_MessageFormat_UseAwaitInstead" translate="yes" xml:space="preserve">
          <source>The {0} member synchronously blocks. Use await instead.</source>
          <target state="needs-review-translation" state-qualifier="mt-suggestion">Das {0}-Mitglied blockiert synchron. Verwenden stattdessen erwarten.</target>
        </trans-unit>
        <trans-unit id="VSSDK008_Title" translate="yes" xml:space="preserve">
          <source>Call awaitable alternatives when in an async method.</source>
          <target state="needs-review-translation" state-qualifier="mt-suggestion">Rufen Sie "awaitable" Alternativen bei einer Async-Methode.</target>
        </trans-unit>
        <trans-unit id="VSSDK009_MessageFormat" translate="yes" xml:space="preserve">
          <source>Limit use of synchronously blocking method calls such as JoinableTaskFactory.Run or Task.Result to public entrypoint members where you must be synchronous. Using it for internal members can needlessly add synchronous frames between asynchronous frames, leading to threadpool exhaustion.</source>
          <target state="needs-review-translation" state-qualifier="mt-suggestion">Limit Nutzung der synchron blockiert Methodenaufrufe wie JoinableTaskFactory.Run oder Task.Result an öffentlichen Entrypoint Mitglieder wo Sie synchron sein müssen. Benutze es für interne Member kann synchrone Frames zwischen asynchronen Rahmen, führt bis zur Erschöpfung Threadpool unnötig hinzufügen.</target>
        </trans-unit>
        <trans-unit id="VSSDK009_Title" translate="yes" xml:space="preserve">
          <source>Avoid synchronous blocks in non-public methods.</source>
          <target state="needs-review-translation" state-qualifier="mt-suggestion">Synchrone Blöcke in nicht-öffentlichen Methoden zu vermeiden.</target>
        </trans-unit>
        <trans-unit id="VSSDK010_CodeFix_Title" translate="yes" xml:space="preserve">
          <source>Rename to {0}</source>
          <target state="needs-review-translation" state-qualifier="mt-suggestion">Benennen Sie in {0}.</target>
          <note from="MultilingualUpdate" annotates="source" priority="2">Please verify the translation’s accuracy as the source string was updated after it was translated.</note>
          <note from="MultilingualBuild" annotates="source" priority="2">{0} is a method name.</note>
        </trans-unit>
        <trans-unit id="VSSDK010_MessageFormat" translate="yes" xml:space="preserve">
          <source>Use "Async" suffix in names of Task-returning methods.</source>
          <target state="needs-review-translation" state-qualifier="mt-suggestion">Verwenden Sie "Async" Suffix im Methodennamen Aufgabe zurückkehren.</target>
          <note from="MultilingualUpdate" annotates="source" priority="2">Please verify the translation’s accuracy as the source string was updated after it was translated.</note>
        </trans-unit>
        <trans-unit id="VSSDK010_Title" translate="yes" xml:space="preserve">
          <source>Use "Async" suffix for async methods.</source>
          <target state="needs-review-translation" state-qualifier="mt-suggestion">Verwenden Sie "Async" Suffix im Methodennamen Aufgabe zurückkehren.</target>
          <note from="MultilingualUpdate" annotates="source" priority="2">Please verify the translation’s accuracy as the source string was updated after it was translated.</note>
        </trans-unit>
        <trans-unit id="VSSDK011_MessageFormat" translate="yes" xml:space="preserve">
          <source>Avoid method overloads that assume TaskScheduler.Current. Use an overload that accepts a TaskScheduler and specify TaskScheduler.Default (or any other) explicitly.</source>
          <target state="new">Avoid method overloads that assume TaskScheduler.Current. Use an overload that accepts a TaskScheduler and specify TaskScheduler.Default (or any other) explicitly.</target>
        </trans-unit>
        <trans-unit id="VSSDK011_Title" translate="yes" xml:space="preserve">
          <source>Avoid method overloads that assume TaskScheduler.Current</source>
          <target state="new">Avoid method overloads that assume TaskScheduler.Current</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>